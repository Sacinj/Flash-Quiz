----------------from Sign up Page-------------------------------
// database of accounts
const accounts = [
    {
        id: 1,
        name: 'Anna',
        email: 'anna@gmail.com',
        pass: 'anna1'
    },
    {
        id: 2,
        name: 'Barbie',
        email: 'barbie@gmail.com',
        pass: 'barbie1'
    },
    {
        id: 3,
        name: 'Cara',
        email: 'cara@gmail.com',
        pass: 'cara1'
    }
  ]

const Signup = () => {
    const [email, setEmail] = useState('');
    const [pass, setPass] = useState('');
    const [cfmpass, setCfmPass] = useState('');
    const [accs, setAccs] = useState(accounts);
    const [showModal, setShowModal] = useState(false);
    const [modalCont, setModalCont] = useState('');
    const navigate = useNavigate();
    const [passPlaceholder, setPassPlaceholder] = useState('********');

    const signup = (e) => {
        e.preventDefault();
        if(email && pass && cfmpass){
            const passArray = accs.map((acc)=>{
                if(acc.email===email){
                    setEmail('');
                    console.log('account exists based on email');
                    setShowModal(true);
                    setModalCont('Email already exists!');
                    return(acc.pass);

                } else {
                    if(pass===cfmpass){
                        console.log('pass and cmf pass matches')
                        /* accs.push(
                            {
                                id: new Date().getTime().toString(),
                                name: 'new account',
                                email,
                                pass
                            }
                        ); */
                        setAccs([...accs, {
                            id: new Date().getTime().toString(),
                            name: 'new account',
                            email,
                            pass
                        }]);
                        console.log(accs);
                        navigate("/sign");
                        return(acc.pass);
                    } else {
                        console.log('confirm pass does not match');
                        setCfmPass('');
                        setPassPlaceholder('Please Confirm Again');
                        return(acc.pass);
                    }
                }
            })
        } else {
            setEmail('');
            setPass('');
            setCfmPass('');
        }
    };
    ---------------------------------------------------
    -----------firebase configuration sdk??------------
    // Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyDmzpbQsZ5Ac9ktMQGhFMx7EqhDEfvvFrU",
  authDomain: "flash-quiz-a0610.firebaseapp.com",
  projectId: "flash-quiz-a0610",
  storageBucket: "flash-quiz-a0610.appspot.com",
  messagingSenderId: "958820173228",
  appId: "1:958820173228:web:dd920302d78fa2b3116609",
  measurementId: "G-0LLMHCJZZ4"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
--------------------------------------------------------------
----------from Sign in ---------------------
useEffect(()=>{
        fetch('http://localhost:8000/accounts').then((res)=>{
                return res.json();
            }).then((data)=>{
                setAccounts(data);
            });
    },[]);

    const signin = (e) => {
        e.preventDefault();
        if(email && pass){
            accounts && accounts.map((acc)=>{
                if(acc.email===email){
                    if(acc.pass===pass){
                        navigate("/homelayout/quiz");
                        return false; // THis is maybe for modal and just so that map returns smthng
                    } else{
                        setEmail('');
                        setPass('');
                        return true;
                    }
                } else{
                    setEmail('');
                    setPass('');
                    return true;
                }
            })
   
        } else {
            setEmail('');
            setPass('');
        }
    };
    --------------------------------------------------
    -------------from Quiz Component--------------
    useEffect(()=>{
        console.log('useEffect is running in quiz component');
        fetch('http://localhost:8000/accounts').then(res=>{
            return res.json();
        }).then((data)=>{
            setAccounts(data);
            console.log(data);
        })
        
    }, [])
    --------------------------------------
    -----------from HomeLayout------------------------
    <section className="cardSet_bar">
                {
                            sets.map((set)=>{
                                return(
                                    <article className="set_box">
                                        <NavLink className="set_title" onClick={(set)=>{setCardSet(set)}} to="quiz">{set.title}</NavLink>
                                    </article>
                                );
                            })
                        }
            </section>
            ----------------------------------
------------------from HomeLayout ------------------
//database
const sets = [
    {
        id: 'science',
        title: 'Science',
        qa: [
            {
                id: 1,
                question: 'What is the powerhouse of the cell?',
                answer: 'Mitochondria'
            },
            {
                id: 2,
                question: 'What is the heaviest organ in the body?',
                answer: 'Liver'
            }
        ]
    },
    {
        id: 'logic circuits',
        title: 'Logic Circuits',
        qa: [
            {
                id: 1,
                question: 'What is 32?',
                answer: 'OR'
            },
            {
                id: 2,
                question: 'What is 8?',
                answer: 'AND'
            }
        ]
    },
    {
        id: 'movies',
        title: 'Movies',
        qa: [
            {
                id: 1,
                question: 'Feed me if you dare',
                answer: 'Shrek'
            },
            {
                id: 2,
                question: 'I am speed',
                answer: 'Cars 1'
            }
        ]
    }
];
--------------------------------------------------

----------------from CardsetBar before displaying collections instead of answers----
const CardsetBar = () => {
    const [scienceList, setScienceList] = useState([]);
    const scienceCollectionRef = collection(db, "Science");

    const getQAList = async () => {
        try {
            const data = await getDocs(scienceCollectionRef);
            console.log(data);
            const filteredData = data.docs.map((doc)=>({
                ...doc.data(),
                id: doc.id,
            }));
            setScienceList(filteredData);
        } catch (err) {
            console.error(err);
        }
    };

    useEffect(() => {
        getQAList();
    }, []);

    return(
        <section className="cardSet_bar">
            {/* need daw ID */}
                {scienceList.map((qa)=>(
                    <article className="set_box" key={qa.id}>
                        {qa.answer}
                    </article>
                ))}
        </section>
    );
};

export default CardsetBar;
------------------------------------------------------------------------------------
-----------------from CardsetBar------------------------------
const [scienceList, setScienceList] = useState([]);
    const scienceCollectionRef = collection(db, "Science");
    const getQAList = async () => {
        try {
            const data = await getDocs(scienceCollectionRef);
            console.log(data);
            const filteredData = data.docs.map((doc)=>({
                ...doc.data(),
                id: doc.id,
            }));
            setScienceList(filteredData);
        } catch (err) {
            console.error(err);
        }
    };

    import { useCollectionData } from "react-firebase-hooks/firestore";
    const query = collection(db, "USERS", userEmail, "CARDSETS");
    const [cardSets, loading, error] = useCollectionData(cardSetCollectionRef);

    const getSet = async () => {
        try{
            const querySnapshot = await getDocs(cardSetCollectionRef);
            querySnapshot.forEach((doc) => {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
            });
            setCardSetList(querySnapshot);
        } catch (err) {
            console.error(err);
        }
    };

     /* const getCardSets = async () => {
        try {
            const data = await getDocs(cardSetCollectionRef);
            console.log(data);
            const filteredData = data.docs.map((doc)=>({
                ...doc.data(),
                id: doc.id,
            }));
            setCardSetList(filteredData);
        } catch (err) {
            console.error(err);
        }
    }; */

    {/* {loading && "Loading..."}
                {
                    cardSets?.map((set)=>(
                        <article className="set_box" key={Math.random()}>
                            {set.name}
                        </article>
                    ))
                } */}

    {/* {scienceList.map((qa)=>(
                    <article className="set_box" key={qa.id}>
                        {qa.answer}
                    </article>
                ))} */}

/* {
    sets.map((set)=>{
        return(
            <article className="set_box">
                <NavLink className="set_title" onClick={(set)=>{setCardSet(set)}} to="quiz">{set.title}</NavLink>
            </article>
        );
    })
} */
-------------------------------------------------------------
-----------Modal Warning from Signup----------------------------
import ModalWarning from "./ModalWarn";
    const [showModal, setShowModal] = useState(false);
    const [modalCont, setModalCont] = useState('');
    setModalCont("User already exists");
    setShowModal(true);
    {showModal && <ModalWarning modalContent={modalCont} />}
------------------------------------------------------------------------
-----------From Quiz.js; tried to use offline retrieval; doesn't work-------------
// Get a document, forcing the SDK to fetch from the offline cache.
    /* const getSet = async () =>{
        try {
            console.log("Before docRef");
            //const docRef = doc(db, "USERS", userEmail, "CARDSETS", title);
            console.log("USERS ",userEmail," CARDSETS ", title);
            const doc = await getDocFromCache(doc(db, "USERS", userEmail, "CARDSETS", title));
            setCardSet(doc);
            // Document was found in the cache. If no cached document exists,
             // an error will be returned to the 'catch' block below.
            console.log("Cached document data:", doc.data());
        } catch (e) {
            console.log("Error getting cached document:", e);
        }
    } */
----------------------------------------------------------------
----------From Quiz.js sample of operational condition----------
{/* <p>{set.title}</p>
            {
                accounts && accounts.map((account)=>{
                    return(
                        <div key={account.id}>
                            <p>{account.email}</p>
                            <p>{account.pass}</p>
                        </div>
                    );
                })
            } */}
------------------------------------------------------------------

--------------------From FCSet-------------------------------
//const scienceCollectionRef = doc(collection(db, "Science"));

const addQA = async () => {
        try {
            await setDoc(scienceCollectionRef,{
                answer: newAnswer,
                question: newQuestion,
            });
            console.log("added");
            console.log(newQuestion);
            console.log(newAnswer);
        } catch (err) {
            console.error(err);
        }
    };


     const addNewSet = async () => {
        try {
            await setDoc(doc(collection(db, newSetName)),{
                a1: newAnswer,
                q1: newQuestion,
            });
            console.log("added");
            console.log(newQuestion);
            console.log(newAnswer);
        } catch (err) {
            console.error(err);
        }
    };


<div className="add2set_container">
            <form className="add2set_form">
                <div>
                <label>
                    Input Question:
                    <input   placeholder="Question..." onChange={(e) => {setNewQuestion(e.target.value)}}></input>
                </label>
                <label>
                    Input Answer:
                    <input   placeholder="Answer..." onChange={(e) => {setNewAnswer(e.target.value)}}></input>
                </label>
                </div>

                <div className="select_submit">
                <label>
                    <select name="FCSet">
                        <option value="" disabled selected hidden>Choose a Set</option>
                    </select>
                </label>
                <button type="button" onClick={addQA}>ADD</button>
                </div>
            </form>
            </div>
---------------------------------------------------------------
---------------EditFCSet----------------------------
const addQA = async () => {
        /* try {
            await setDoc(scienceCollectionRef,{
                answer: newAnswer,
                question: newQuestion,
            });
            console.log("added");
            console.log(newQuestion);
            console.log(newAnswer);
        } catch (err) {
            console.error(err);
        } */
    };


<div>
                    <p>Questions:</p>
                    <p>Answers:</p>
                </div>
                <div>
                    {
                        /* cardSet?.map((field)=>(
                            <article>
                                <p>{field}</p>
                            </article>
                        )) */


                            /* What to do here is to display the fields of this document and then get the 
                            number of the last question in order to know the next field name/number of
                            the new question and answer to be added by incrementing */

                    }
                </div>
---------------------------------------------------------------------
--------------------------Signin before using cookies-------------------
useEffect(() => {
        console.log("Current user logged in: ",auth?.currentUser?.email);
    }, []);

    const signin = (e) => {
        e.preventDefault();
        signInWithEmailAndPassword(auth, email, pass)
            .then((userCredentials) => {
                console.log("User credentials: ",userCredentials);
                navigate("/homelayout/quiz");
            }) .catch((err) => {
                console.log(err);
            });
    };
--------------------------------------------------------------------
-----------------------EditFCSet comments/drafts after being able to add and display properly----------
// const setTitleRef = doc(db, "USERS", loggedInEmail, "CARDSETS", title);
    /* const userCookie = cookies.get("auth-token");
        console.log("User Cookie Email: ",userCookie.email); */

                /* const getData = async () => {
            try{
                const queryData = query(doc(db, "USERS", loggedInEmail, "CARDSETS", title));
                const ususcribe = onSnapshot(queryData, (snapshot) => {
                    let qaData = [];
                    snapshot.forEach((field) => {
                        qaData.push({...field.data()});
                    });
                    setCardSet(qaData);
                    console.log("The CardSet Data from query: ", qaData);
                });
            } catch (err) {
                console.error(err);
            }
        } */
    
    /* useEffect(()=>{
        
        onAuthStateChanged(auth, (userData)=>{
            if(userData){
                setEmail(userData.email);
                console.log("EditFCSet: Current User is ", loggedInEmail);
                getData();
            }
        });
        

        if(loggedInEmail){
            getData();
        }
        
    },[loggedInEmail]);

    const getData = async () => {
        try {
            const docSnap = await getDoc(doc(db, "USERS", loggedInEmail, "CARDSETS", title));
            if(docSnap.exists()){
                setCardSet(docSnap.data());
                console.log("EditFCSet: Data: ", cardSet);

                const fieldNames = Object.keys(cardSet);
                console.log(fieldNames);
                // Extract the numbers from field names
                const numbers = fieldNames.map((fieldName) => parseInt(fieldName.slice(1)));
                // Sort the numbers in descending order
                numbers.sort((a, b) => b - a);
                // Get the highest number
                const highestNumber = numbers[0];
                console.log("This is the highest numebr: ", highestNumber);
                setNextNumber(highestNumber+1);
                console.log(nextNumber);

            } else{
                console.log("EditFCSet no data");
            }
        } catch (err) {
            console.error(err);
        }
    } */



        /* const addQA = () => {
        console.log("The next number: ", nextNumber);
    }; */


    /* const addNewSet = async () => {
        try {
            await setDoc(doc(db, "USERS",loggedInEmail, "CARDSETS", newSetName),{
                a1: newAnswer,
                q1: newQuestion,
            });
            window.location.reload(true); // to refresh the card set bar to show the new card set on the list
        } catch (err) {
            console.error(err);
        }
        
    }; */


    // cardSet ? <p>{cardSet["q1"]}</p> : <p>Loading...</p>
                        /* cardSet ? for(const i=0; i<nextNumber; i++){

                        } : <p>Loading...</p> */



                        Object.keys(cardSet).map((key) => (
                            <td key={key}>
                              <p>{key}: {cardSet[key]}</p>
                            </td>
                          ))

-----------------------------------------------------------------------------------------------------
